// Code generated by MockGen. DO NOT EDIT.
// Source: processor/payment/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "processor/payment/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCardSensitiveData mocks base method
func (m *MockRepository) GetCardSensitiveData(token string, errors *models.Error) *models.CardSensitiveData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardSensitiveData", token, errors)
	ret0, _ := ret[0].(*models.CardSensitiveData)
	return ret0
}

// GetCardSensitiveData indicates an expected call of GetCardSensitiveData
func (mr *MockRepositoryMockRecorder) GetCardSensitiveData(token, errors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardSensitiveData", reflect.TypeOf((*MockRepository)(nil).GetCardSensitiveData), token, errors)
}

// GetAcquirerURL mocks base method
func (m *MockRepository) GetAcquirerURL(id int64, errors *models.Error) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcquirerURL", id, errors)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAcquirerURL indicates an expected call of GetAcquirerURL
func (mr *MockRepositoryMockRecorder) GetAcquirerURL(id, errors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcquirerURL", reflect.TypeOf((*MockRepository)(nil).GetAcquirerURL), id, errors)
}
